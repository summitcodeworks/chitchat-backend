package com.chitchat.messaging.document;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;
import java.util.List;

/**
 * Message document stored in MongoDB
 * 
 * Represents a single message in the ChitChat messaging system.
 * Supports both one-on-one and group messaging.
 * 
 * MongoDB Collection: messages
 * 
 * Key Features:
 * - Flexible schema for different message types
 * - Delivery and read receipt tracking
 * - Media message support (images, videos, documents)
 * - Message replies and mentions
 * - Scheduled messages
 * - Auto-generated MongoDB ObjectId
 * 
 * Indexing Strategy:
 * - Index on senderId for sender's message history
 * - Index on recipientId for recipient's inbox
 * - Index on groupId for group chat messages
 * - Compound index on (recipientId, createdAt) for efficient pagination
 * 
 * Message Types Supported:
 * - TEXT: Plain text messages
 * - IMAGE: Photo messages with thumbnail
 * - VIDEO: Video messages with thumbnail
 * - AUDIO: Voice messages
 * - DOCUMENT: File attachments (PDF, etc.)
 * - LOCATION: GPS coordinates
 * - CONTACT: vCard contact sharing
 * - STICKER: Sticker/emoji messages
 */
@Document(collection = "messages")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Message {
    
    /**
     * Unique message identifier (MongoDB ObjectId)
     * 
     * Format: 24-character hex string
     * Example: "507f1f77bcf86cd799439011"
     * 
     * Auto-generated by MongoDB on insert.
     * Used for message references, replies, and retrieval.
     */
    @Id
    private String id;
    
    /**
     * User ID of the message sender
     * 
     * References User entity in user-service.
     * Never null - every message has a sender.
     * Used for:
     * - Displaying sender name and avatar
     * - Sender's message history
     * - Message attribution
     */
    private Long senderId;
    
    /**
     * User ID of the message recipient (for one-on-one chats)
     * 
     * Null for group messages (use groupId instead).
     * One-on-one messages have both senderId and recipientId.
     * Used for:
     * - Routing messages to correct user
     * - Building chat history between two users
     * - Inbox queries
     */
    private Long recipientId;
    
    /**
     * Group ID for group chat messages
     * 
     * Null for one-on-one messages (use recipientId instead).
     * References Group document in same collection.
     * Used for:
     * - Group chat message history
     * - Determining message context
     * - Group-specific features
     */
    private String groupId;
    
    /**
     * Message content/text
     * 
     * For TEXT messages: The actual message text
     * For MEDIA messages: Optional caption
     * For LOCATION: Address or place name
     * For CONTACT: Contact name
     * 
     * Can be null for media-only messages.
     * Max length should be enforced at validation layer.
     */
    private String content;
    
    /**
     * Type of message (TEXT, IMAGE, VIDEO, etc.)
     * 
     * Determines how the message should be rendered in UI.
     * See MessageType enum for all supported types.
     */
    private MessageType type;
    
    /**
     * Current delivery status of the message
     * 
     * Lifecycle:
     * 1. SENT - Message sent from sender's device
     * 2. DELIVERED - Message delivered to recipient's device
     * 3. READ - Message read/opened by recipient
     * 4. FAILED - Message delivery failed
     * 
     * Used for message status indicators (single tick, double tick, blue tick).
     */
    private MessageStatus status;
    
    /**
     * URL to media file (for media messages)
     * 
     * Points to file in media-service or CDN.
     * Examples:
     * - IMAGE: https://cdn.chitchat.com/images/abc123.jpg
     * - VIDEO: https://cdn.chitchat.com/videos/xyz789.mp4
     * - DOCUMENT: https://cdn.chitchat.com/docs/report.pdf
     * 
     * Null for TEXT-only messages.
     */
    private String mediaUrl;
    
    /**
     * URL to thumbnail/preview image (for media messages)
     * 
     * Used for:
     * - VIDEO: Video thumbnail frame
     * - DOCUMENT: Document preview
     * - IMAGE: Compressed/smaller version for lists
     * 
     * Improves loading performance in chat lists.
     * Null for TEXT, AUDIO, LOCATION messages.
     */
    private String thumbnailUrl;
    
    /**
     * Message ID this message is replying to
     * 
     * Enables threaded conversations.
     * References another Message document by its id.
     * Null if not a reply.
     * 
     * Used for:
     * - Displaying quoted message
     * - Thread navigation
     * - Context preservation
     */
    private Long replyToMessageId;
    
    /**
     * List of user IDs mentioned in this message
     * 
     * Used for @mentions in group chats.
     * Example: ["user123", "user456"]
     * 
     * Mentioned users receive special notification.
     * Null or empty for messages without mentions.
     */
    private List<String> mentions;
    
    /**
     * Scheduled delivery time for future messages
     * 
     * If set, message is stored but not delivered until this time.
     * Null for immediate messages (most common).
     * 
     * Used for:
     * - Scheduled reminders
     * - Birthday messages
     * - Automated messages
     */
    private LocalDateTime scheduledAt;
    
    /**
     * Timestamp when message was delivered to recipient
     * 
     * Null until recipient's device acknowledges delivery.
     * Used for delivery status and metrics.
     * Set when status changes to DELIVERED.
     */
    private LocalDateTime deliveredAt;
    
    /**
     * Timestamp when message was read/opened by recipient
     * 
     * Null until recipient opens the message.
     * Used for read receipts (blue ticks in WhatsApp-style apps).
     * Set when status changes to READ.
     * 
     * Privacy: Can be disabled per user settings.
     */
    private LocalDateTime readAt;
    
    /**
     * Timestamp when message was created/sent
     * 
     * Automatically set by MongoDB auditing on insert.
     * Used for:
     * - Message ordering
     * - Chat history chronology
     * - Pagination
     */
    @CreatedDate
    private LocalDateTime createdAt;
    
    /**
     * Timestamp when message was last modified
     * 
     * Automatically updated by MongoDB auditing.
     * Changes when:
     * - Status updated (delivered, read)
     * - Message edited
     * - Metadata updated
     */
    @LastModifiedDate
    private LocalDateTime updatedAt;
    
    /**
     * Enum defining types of messages supported
     * 
     * Each type has different rendering and handling in the UI:
     * - TEXT: Simple text message
     * - IMAGE: Photo with optional caption
     * - VIDEO: Video with thumbnail and caption
     * - AUDIO: Voice message or audio file
     * - DOCUMENT: File attachment (PDF, DOCX, etc.)
     * - LOCATION: GPS coordinates with map preview
     * - CONTACT: Shared contact (vCard)
     * - STICKER: Animated or static sticker
     */
    public enum MessageType {
        TEXT, IMAGE, VIDEO, AUDIO, DOCUMENT, LOCATION, CONTACT, STICKER
    }
    
    /**
     * Enum defining message delivery status
     * 
     * Status progression:
     * SENT -> DELIVERED -> READ
     * 
     * Or:
     * SENT -> FAILED (if delivery fails)
     * 
     * Visual indicators (WhatsApp-style):
     * - SENT: Single gray check mark
     * - DELIVERED: Double gray check marks
     * - READ: Double blue check marks
     * - FAILED: Red exclamation mark
     */
    public enum MessageStatus {
        SENT, DELIVERED, READ, FAILED
    }
}
