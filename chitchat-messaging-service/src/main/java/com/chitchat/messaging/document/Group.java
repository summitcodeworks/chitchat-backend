package com.chitchat.messaging.document;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;
import java.util.List;

/**
 * Group document stored in MongoDB
 * 
 * Represents a group chat in ChitChat messaging system.
 * Similar to WhatsApp/Telegram group chats.
 * 
 * MongoDB Collection: groups
 * 
 * Key Features:
 * - Multi-user group conversations
 * - Admin/moderator roles
 * - Customizable group settings
 * - Group avatar and description
 * - Member management
 * - Activity tracking
 * 
 * Group Member Roles:
 * - ADMIN: Full control (add/remove members, change settings, delete group)
 * - MODERATOR: Can remove members and moderate content
 * - MEMBER: Can send messages and view group info
 * 
 * Typical Use Cases:
 * - Family group chats
 * - Work team discussions
 * - Friend groups
 * - Community groups
 * - Event planning groups
 */
@Document(collection = "groups")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Group {
    
    /**
     * Unique group identifier (MongoDB ObjectId)
     * 
     * Format: 24-character hex string
     * Auto-generated by MongoDB.
     */
    @Id
    private String id;
    
    /**
     * Group name/title
     * 
     * Examples: "Family", "Work Team", "Weekend Plans"
     * Required, visible to all members.
     * Can be changed by admins.
     */
    private String name;
    
    /**
     * Group description
     * 
     * Optional longer description of the group's purpose.
     * Examples: "Family group for sharing updates and photos"
     * Can be changed by admins or members (based on settings).
     */
    private String description;
    
    /**
     * URL to group avatar/icon
     * 
     * Group profile picture displayed in chat list.
     * Points to image in media service or CDN.
     * Can be changed by admins.
     */
    private String avatarUrl;
    
    /**
     * User ID of the primary group admin
     * 
     * Group creator is the first admin.
     * If this admin leaves, another admin should be assigned.
     * At least one admin required for group management.
     */
    private Long adminId;
    
    /**
     * List of all group members
     * 
     * Embedded documents containing member details.
     * Each member has:
     * - User ID
     * - Role (ADMIN, MODERATOR, MEMBER)
     * - Join timestamp
     * - Last activity in group
     */
    private List<GroupMember> members;
    
    /**
     * Group settings and permissions
     * 
     * Embedded document controlling group behavior.
     * Admins can configure what members are allowed to do.
     */
    private GroupSettings settings;
    
    /**
     * Timestamp of last activity in group
     * 
     * Updated when:
     * - New message sent
     * - Member added/removed
     * - Group info changed
     * 
     * Used for sorting groups by recent activity.
     */
    private LocalDateTime lastActivity;
    
    /**
     * Timestamp when group was created
     * 
     * Automatically set by MongoDB auditing.
     */
    @CreatedDate
    private LocalDateTime createdAt;
    
    /**
     * Timestamp when group was last modified
     * 
     * Automatically updated by MongoDB auditing.
     */
    @LastModifiedDate
    private LocalDateTime updatedAt;
    
    /**
     * Inner class representing a group member
     * 
     * Embedded document within the Group document.
     * Stores member-specific information and permissions.
     */
    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class GroupMember {
        /**
         * ID of the user who is a member
         * References User entity in user-service
         */
        private Long userId;
        
        /**
         * Member's role in the group
         * Determines what actions they can perform
         */
        private GroupRole role;
        
        /**
         * When the user joined the group
         * Used for membership tracking and analytics
         */
        private LocalDateTime joinedAt;
        
        /**
         * Last time member was active in group
         * Used for member activity tracking
         * Can be shown to other members or kept private
         */
        private LocalDateTime lastSeen;
    }
    
    /**
     * Enum defining group member roles and permissions
     * 
     * ADMIN: Full group control
     *   - Add/remove members
     *   - Change group info
     *   - Modify group settings
     *   - Delete group
     *   - Promote/demote members
     * 
     * MODERATOR: Content moderation
     *   - Delete messages
     *   - Remove members
     *   - Moderate content
     * 
     * MEMBER: Basic participation
     *   - Send messages (if allowed by settings)
     *   - View group info
     *   - Leave group
     */
    public enum GroupRole {
        ADMIN, MODERATOR, MEMBER
    }
    
    /**
     * Inner class representing group settings
     * 
     * Embedded document controlling group permissions.
     * Configured by group admins.
     */
    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class GroupSettings {
        /**
         * Whether regular members can invite others
         * false: Only admins can add members
         * true: Any member can invite
         */
        private boolean allowMembersToInvite;
        
        /**
         * Whether members can change group name/description
         * false: Only admins can modify group info
         * true: Any member can modify
         */
        private boolean allowMembersToChangeGroupInfo;
        
        /**
         * Whether members can send text messages
         * false: Group is in read-only mode (announcements only)
         * true: Normal chat mode
         */
        private boolean allowMembersToSendMessages;
        
        /**
         * Whether members can send media (images, videos, files)
         * false: Text-only group
         * true: All message types allowed
         */
        private boolean allowMembersToSendMedia;
        
        /**
         * Group description (duplicated from parent for backward compatibility)
         * 
         * @deprecated Use description field in parent Group document
         */
        private String groupDescription;
    }
}
