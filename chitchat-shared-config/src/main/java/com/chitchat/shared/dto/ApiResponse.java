package com.chitchat.shared.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * Standard API response wrapper for all ChitChat REST API responses
 * 
 * Provides consistent response structure across all microservices:
 * - Uniform success/error format
 * - Timestamp for all responses
 * - Optional trace ID for error tracking
 * - Generic type parameter for flexible data payloads
 * 
 * Response Structure:
 * {
 *   "success": true/false,
 *   "message": "Optional message",
 *   "data": { ... },
 *   "timestamp": "2024-01-15T10:30:00",
 *   "traceId": "abc12345"
 * }
 * 
 * Usage Examples:
 * 
 * Success with data:
 * return ApiResponse.success(user, "User created successfully");
 * 
 * Success with just data:
 * return ApiResponse.success(userList);
 * 
 * Error response:
 * return ApiResponse.error("User not found");
 * 
 * Benefits:
 * - Consistent API responses across all services
 * - Easy error handling on client side
 * - Trace IDs for debugging
 * - Timestamps for monitoring and analytics
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse<T> {
    /**
     * Indicates if the request was successful
     * true: Request completed successfully
     * false: Request failed with error
     */
    private boolean success;
    
    /**
     * Human-readable message
     * Optional for success responses, required for errors
     * Examples: "Login successful", "User not found"
     */
    private String message;
    
    /**
     * Response payload data
     * Generic type allows any data structure
     * Null for error responses or operations with no return data
     */
    private T data;
    
    /**
     * Timestamp when response was generated
     * ISO 8601 format
     * Used for client-side caching and monitoring
     */
    private LocalDateTime timestamp;
    
    /**
     * Unique trace ID for error tracking
     * Generated by GlobalExceptionHandler for errors
     * Helps correlate errors across services and logs
     */
    private String traceId;

    /**
     * Creates a successful response with data
     * 
     * @param data Response payload
     * @param <T> Type of response data
     * @return ApiResponse with success=true and provided data
     */
    public static <T> ApiResponse<T> success(T data) {
        return ApiResponse.<T>builder()
                .success(true)
                .data(data)
                .timestamp(LocalDateTime.now())
                .build();
    }

    /**
     * Creates a successful response with data and message
     * 
     * @param data Response payload
     * @param message Success message
     * @param <T> Type of response data
     * @return ApiResponse with success=true, data, and message
     */
    public static <T> ApiResponse<T> success(T data, String message) {
        return ApiResponse.<T>builder()
                .success(true)
                .message(message)
                .data(data)
                .timestamp(LocalDateTime.now())
                .build();
    }

    /**
     * Creates an error response with message
     * 
     * @param message Error message
     * @param <T> Type parameter (data will be null)
     * @return ApiResponse with success=false and error message
     */
    public static <T> ApiResponse<T> error(String message) {
        return ApiResponse.<T>builder()
                .success(false)
                .message(message)
                .timestamp(LocalDateTime.now())
                .build();
    }
}
